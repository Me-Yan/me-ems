<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.me.inner.mapper.SecurityMapper">

    <select id="getUserByUsername" parameterType="java.lang.String" resultType="com.me.inner.dto.BaseUserDetails">
        SELECT
            userId_n AS userId,
            username_m AS username,
            password_x AS password,
            create_dt AS createDate,
            create_m AS createBy
        FROM ${tablePrefix}user WHERE username_m = #{username} AND enabled_c = 'Y'
    </select>
    
    <select id="listRole2Resource" resultType="com.me.inner.dto.Role2ResSecDTO">
        SELECT
            role.roleId_n AS roleId,
            role.roleName_m AS roleName,
            res.resId_n AS resourceId,
            res.resPath_x AS path
        FROM ${tablePrefix}role2res rr
        LEFT JOIN ${tablePrefix}role role ON rr.roleId_n = role.roleId_n
        LEFT JOIN ${tablePrefix}resource res ON rr.resId_n = res.resId_n
        WHERE role.enabled_c = 'A' AND res.enabled_c = 'A'
    </select>

    <select id="getHomePageByUsername" parameterType="java.lang.String" resultType="com.me.inner.dto.ResourceSecDTO">
        SELECT
            res.resId_n AS resourceId,
            res.resType_x AS resourceType,
            res.resPath_x AS resourcePath,
            res.resDesc_x AS resourceDescription,
            res.create_dt AS createDate,
            res.create_m AS createBy
        FROM ${tablePrefix}user u
        LEFT JOIN ${tablePrefix}user2role ue ON u.userId_n = ue.userId_n
        LEFT JOIN ${tablePrefix}role2res us ON ue.roleId_n = us.roleId_n
        LEFT JOIN ${tablePrefix}resource res ON us.resId_n = res.resId_n
        WHERE u.username_m = #{username} AND res.resType_x = 'HOME' AND res.enabled_c = 'Y' AND u.enabled_c = 'Y'
    </select>

    <select id="listRoleByUsername" parameterType="java.lang.String" resultType="com.me.inner.dto.RoleSecDTO">
        SELECT
            role.roleId_n AS roleId,
            role.roleName_m AS roleName,
            role.create_m AS createBy,
            role.create_dt AS createDate
        FROM ${tablePrefix}user u
        LEFT JOIN ${tablePrefix}user2role ur ON u.userId_n = ur.userId_n
        LEFT JOIN ${tablePrefix}role role ON ur.roleId_n = role.roleId_n
        WHERE u.username_m = #{username} AND role.enabled_c = 'Y' AND u.enabled_c = 'Y'
    </select>

    <select id="listResourceByUsername" parameterType="java.lang.String" resultType="com.me.inner.dto.ResourceSecDTO">
        SELECT
            res.resId_n AS resourceId,
            res.resType_x AS resourceType,
            res.resPath_x AS resourcePath,
            res.resDesc_x AS resourceDescription,
            res.create_dt AS createDate,
            res.create_m AS createBy
        FROM ${tablePrefix}user u
        LEFT JOIN ${tablePrefix}user2role ue ON u.userId_n = ue.userId_n
        LEFT JOIN ${tablePrefix}role2res us ON ue.roleId_n = us.roleId_n
        LEFT JOIN ${tablePrefix}resource res ON us.resId_n = res.resId_n
        WHERE u.username_m = #{username} AND res.enabled_c = 'Y' AND u.enabled_c = 'Y'
    </select>

    <insert id="saveLoginHistory" parameterType="com.me.inner.dto.LoginHistorySecDTO">
        INSERT INTO ${tablePrefix}loginhistory
        (
            username_m,
            ip_x,
            status_c,
            create_dt
        )
        VALUES
        (
            #{username, jdbcType=INTEGER},
            #{ip, jdbcType=VARCHAR},
            #{status, jdbcType=VARCHAR},
            #{createDate, jdbcType=TIMESTAMP}
        )
    </insert>

    <select id="getRoleByName" parameterType="java.lang.String" resultType="com.me.inner.dto.RoleSecDTO">
        SELECT
            roleId_n AS roleId,
            roleName_m AS roleName,
            enabled_c AS createBy,
            create_dt AS createDate
        FROM ems_role
        WHERE roleName_m = #{roleName, jdbcType=VARCHAR} AND enabled_c = 'Y'
    </select>

    <insert id="saveUser" parameterType="com.me.inner.dto.UserSecDTO" keyColumn="userId_n" keyProperty="userId" useGeneratedKeys="true">
        INSERT INTO ems_user
        (
            username_m,
            password_x,
            enabled_c,
            create_dt,
            create_m
        )
        VALUES
        (
            #{username, jdbcType=VARCHAR},
            #{password, jdbcType=VARCHAR},
            #{enabled, jdbcType=CHAR},
            #{createDate, jdbcType=TIMESTAMP},
            #{createBy, jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="saveUser2Role" parameterType="com.me.inner.dto.User2RoleSecDTO">
        INSERT INTO ems_user2role
        (
            userId_n,
            roleId_n,
            create_dt,
            create_m
        )
        VALUES
        (
            #{userId, jdbcType=INTEGER},
            #{roleId, jdbcType=INTEGER},
            #{createDate, jdbcType=TIMESTAMP},
            #{createBy, jdbcType=VARCHAR}
        )
    </insert>

    <update id="deleteUserByUsername" parameterType="java.lang.String">
        UPDATE ems_user SET enabled_c = 'I' WHERE username_m = #{username, jdbcType=VARCHAR}
    </update>

    <update id="resetPasswordByUsername">
        UPDATE ems_user SET password_x = #{password, jdbcType=VARCHAR} WHERE username_m = #{username, jdbcType=VARCHAR}
    </update>

</mapper>